#!/usr/bin/env python
from PyQt5 import QtWidgets, QtCore, uic
import pyqtgraph as pg
from pyqtgraph import PlotWidget

from argparse import ArgumentParser
import sys
import numpy as np
from pathlib import Path
import time

import reuss as rs


class MainWindow(QtWidgets.QMainWindow):

    def __init__(self, *args, **kwargs):
        pg.setConfigOption('background', (247, 247, 247))
        pg.setConfigOption('foreground', 'k')
        
        print(args)
        super(MainWindow, self).__init__()
        uic.loadUi('g2panel.ui', self)
        pen = pg.mkPen(color = (36, 119, 173), width=1,) 
        self.curve = self.plotWidget.plot(pen=pen)
        
        if args[0].demo:
            self.det = rs.DummyDetector()
            self.rcv = rs.DummyReceiver(args[0].receiver_endpoint)
            self.zmq_rcv = rs.DummyPreviewReceiver('tcp://129.129.202.97:4547')
            self.zmq_rcv.start()
            self.zmq_rcv.mask[100:200] = True

        else:
            from slsdet import Detector
            self.det = Detector()
            self.rcv = rs.Receiver(args[0].receiver_endpoint)
            self.rcv.udp_source = f"{self.det.udp_dstip}:{self.det.udp_dstport}"
            self.rcv.frames = self.det.frames
            self.rcv.fpath = Path("/home/l_msdetect/erik/tmp/g2")
            self.zmq_rcv = rs.PreviewReceiver('tcp://129.129.202.97:4547', timeout_ms=100)
            self.zmq_rcv.start()


    
        self.update_fields()


        self.startButton.clicked.connect(self.start)
    
        #For simple attributes it is possible to connect directly using a lambda 
        # do avoid having to make an extra function
        self.highVoltageSpinBox.valueChanged.connect(lambda x: setattr(self.det, 'highvoltage', x))

        #Needs a function since editingFinished doesn't pass a parameter
        self.nameLineEdit.editingFinished.connect(self.setFname)
        self.pathLineEdit.editingFinished.connect(self.setPath)

        #Exposure time should be set on both unit and value change
        self.expTimeComboBox.currentIndexChanged.connect(self.setExptime)
        self.exposureSpinBox.editingFinished.connect(self.setExptime)

        #Setting Period to detector and time unit
        self.periodTimeComboBox.currentIndexChanged.connect(self.setPeriod)
        self.periodSpinBox.editingFinished.connect(self.setPeriod)

        #Setting frames to detector after completion of editing
        self.frameSpinBox.editingFinished.connect(self.setFrames)

        #Setting trigger to detector and time unit
        self.triggerSpinBox.editingFinished.connect(self.setTrigger)

        #Setting timing modes
        self.autoRadioButton.clicked.connect(self.autoMode)
        self.triggerRadioButton.clicked.connect(self.triggerMode)

        #setting gain
        self.dynamicRadioButton.clicked.connect(self.dynamicGain)
        self.g1RadioButton.clicked.connect(self.fixedG1Gain)
        self.g2RadioButton.clicked.connect(self.fixedG2Gain)

        #Setting Delay after Trigger to detector and time unit
        self.triggerTimeComboBox.currentIndexChanged.connect(self.setDelayTrigger)
        self.delayTriggerSpinBox.editingFinished.connect(self.setDelayTrigger)

        #Setting and getting index values
        self.indexSpinBox.editingFinished.connect(self.setIndex)

        #Power off button
        self.closeButton.clicked.connect(self.powerOffDetector)

        self.pedestalCheckBox.stateChanged.connect(lambda x: setattr(self.zmq_rcv, 'collect_pedestal', x))


        #Plot related settings


        #Timers
        self.progress_timer = QtCore.QTimer()
        self.progress_timer.timeout.connect(self.update_progress)
        self.update_progress()

        self.plot_timer =  QtCore.QTimer()
        self.plot_timer.timeout.connect(self.update_plot)


        #help
        self.actionAbout.triggered.connect(self.show_about)


    def show_about(self):
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("Gotthard2 GUI")
        msg.setText("Credits:\n Sudip Shrestha\n Dhanya Thattil\n Erik Froejdh")
        x = msg.exec_()


    def update_fields(self):
        """Update all fields in the GUI with current values from the detector"""
        self.frameSpinBox.setValue(self.det.frames)
        self.nameLineEdit.setText(self.rcv.fname)
        self.pathLineEdit.setText(self.rcv.fpath)
        self.indexSpinBox.setValue(self.det.index)

        #TODO! Add the additional fields

    def update_progress(self):
        p = int(self.rcv.progress*100)
        self.progressBar.setValue(p)
        if p == 100:
            self.progress_timer.stop()
            self.plot_timer.stop()

    def update_status(self):
        s = str(self.det.status).split('.')[1]
        self.statusLabel.setText(s)

    def update_plot(self):
        data = self.zmq_rcv.get_data()
        self.curve.setData(data)


    def start(self):
        self.progress_timer.start(100)
        self.plot_timer.start(50)
        self.rcv.start()
        time.sleep(0.1)
        self.det.start()

    def setPath(self):
        self.rcv.fpath = self.pathLineEdit.text()

    def setFname(self):
        self.rcv.fname = self.nameLineEdit.text()
    
    def setFrames(self):
        #number of frames needs to go to both receiver and detector
        self.rcv.frames = self.frameSpinBox.value()
        self.det.frames = self.frameSpinBox.value()

    def setTrigger(self):
        #number of frames needs to go to both receiver and detector
        self.det.trigger = self.triggerSpinBox.value()


    #Function for setting exposure time and time unit
    def setExptime(self):
        match self.expTimeComboBox.currentIndex():
            case 0:
                unit = 1e-3
            case 1:
                unit = 1e-6
            case 2:
                unit = 1e-9
        self.det.exptime = self.exposureSpinBox.value()*unit

    #Function for setting period time and time unit
    def setPeriod(self):
        match self.periodTimeComboBox.currentIndex():
            case 0:
                unit = 1e-3
            case 1:
                unit = 1e-6
            case 2:
                unit = 1e-9
        self.det.period = self.periodSpinBox.value()*unit

    #Function for setting Delay after Trigger time and time unit
    def setDelayTrigger(self):
        match self.triggerTimeComboBox.currentIndex():
            case 0:
                unit = 1e-3
            case 1:
                unit = 1e-6
            case 2:
                unit = 1e-9
        self.det.delayTrigger = self.delayTriggerSpinBox.value()*unit

    #Setting Gain modes
    def dynamicGain(self, selected):
        if selected:
            print('Dynamic')
    
    def fixedG1Gain(self, selected):
        if selected:
            print('fixed G1')

    def fixedG2Gain(self, selected):
        if selected:
            print('fixed G1')  

   #Setting Gain modes
    def autoMode(self, selected):
        if selected:
            print('Auto timing mode')
    
    def triggerMode(self, selected):
        if selected:
            print('Trigger timing mode')


    def setIndex(self):
        self.det.index = self.indexSpinBox.value()

    #Safely powering off the detectors
    def powerOffDetector(self):
        self.det.highvoltage = 0.0
        self.highVoltageSpinBox.setValue(self.det.highvoltage)

if __name__ == '__main__':


    parser = ArgumentParser()
    parser.add_argument(
        "receiver_endpoint", 
        help="Zmq endpoint to connect to the receiver", 
        type=str,
    )
    parser.add_argument(
        "-d", "--demo", 
        help="Demo mode, doesn't require detector", 
        action='store_true'
    )

    args = parser.parse_args()
    app = QtWidgets.QApplication(sys.argv)
    main = MainWindow(args)
    main.show()

    #Timer for updating the plot
    timer = QtCore.QTimer()
    timer.timeout.connect(main.update_status)
    timer.start(100)
    

    #Run the app
    app.exec_()

    # #Stop the receiving process before exiting
    main.zmq_rcv.stop()

