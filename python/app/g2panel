#!/usr/bin/env python
from PyQt5 import QtWidgets, QtCore, uic
from pyqtgraph import PlotWidget
import pyqtgraph as pg
import sys
import numpy as np

from slsdet import Gotthard2
from pathlib import Path
import reuss as rs
import time
from slsdet import Detector



class MainWindow(QtWidgets.QMainWindow):

    def __init__(self, *args, **kwargs):
        pg.setConfigOption('background', (154, 153, 150))
        pg.setConfigOption('foreground', 'k')


        super(MainWindow, self).__init__(*args, **kwargs)

        self.det = Detector()
        self.rcv = rs.Receiver("tcp://129.129.202.97:5556")
        self.rcv.udp_source = f"{self.det.udp_dstip}:{self.det.udp_dstport}"
        self.rcv.frames = self.det.frames
        self.rcv.fpath = Path("/home/l_msdetect/erik/tmp/g2")

        self.zmq_rcv = rs.PreviewReceiver('tcp://129.129.202.97:4547', timeout_ms=100)
        self.zmq_rcv.start()

        # #Load the UI Page
        uic.loadUi('g2panel.ui', self)

        self.startButton.clicked.connect(self.start)
        pen = pg.mkPen(color = (36, 119, 173), width=1,) 
        self.curve = self.plotWidget.plot(pen=pen)

        #initialize fields
        self.nameLineEdit.setText(self.rcv.fname)
        self.pathLineEdit.textChanged.connect(self.setFname)

        self.pathLineEdit.setText(self.rcv.fpath)
        self.pathLineEdit.textChanged.connect(self.setPath)


        self.fwriteCheckBox.setChecked(self.rcv.fwrite)
        self.fwriteCheckBox.stateChanged.connect(self.setFwrite)



        #Timers
        self.progress_timer = QtCore.QTimer()
        self.progress_timer.timeout.connect(self.update_progress)
        self.update_progress()
        # timer3.start(100)


    def update_progress(self):
        p = int(self.rcv.progress*100);
        self.progressBar.setValue(p)
        if p == 100:
            self.progress_timer.stop()

    def update_status(self):
        s = str(self.det.status).split('.')[1]
        self.statusLabel.setText(s)

    def update_plot(self):
        data = self.zmq_rcv.get_data()
        self.curve.setData(data)


    def start(self):
        self.progress_timer.start(100)
        self.rcv.start()
        time.sleep(0.1)
        self.det.start()

    def setPath(self):
        self.rcv.fpath = self.pathLineEdit.text()

    def setFname(self):
        self.rcv.fname = self.nameLineEdit.text()
    
    def setFwrite(self):
        self.rcv.fwrite = self.fwriteCheckBox.isChecked()


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    main = MainWindow()
    main.show()

    #Timer for updating the plot
    timer = QtCore.QTimer()
    timer.timeout.connect(main.update_status)
    timer.start(100)

    timer2 = QtCore.QTimer()
    timer2.timeout.connect(main.update_plot)
    timer2.start(100)

    

    #Run the app
    app.exec_()

    # #Stop the receiving process before exiting
    main.zmq_rcv.stop()

