#!/usr/bin/env python
from PyQt5 import QtWidgets, QtCore, uic
import pyqtgraph as pg
from pyqtgraph import PlotWidget

from argparse import ArgumentParser
import sys
import numpy as np
from pathlib import Path
import time

import reuss as rs


class MainWindow(QtWidgets.QMainWindow):

    def __init__(self, *args, **kwargs):
        pg.setConfigOption('background', (247, 247, 247))
        pg.setConfigOption('foreground', 'k')
        
        print(args)
        super(MainWindow, self).__init__()
        uic.loadUi('g2panel.ui', self)
        
        if args[0].demo:
            self.det = rs.DummyDetector()
            self.rcv = rs.DummyReceiver(args[0].receiver_endpoint)
            self.zmq_rcv = rs.DummyPreviewReceiver('tcp://129.129.202.97:4547')
            self.zmq_rcv.start()

        else:
            from slsdet import Detector
            self.det = Detector()
            self.rcv = rs.Receiver(args[0].receiver_endpoint)
            self.rcv.udp_source = f"{self.det.udp_dstip}:{self.det.udp_dstport}"
            self.rcv.frames = self.det.frames
            self.rcv.fpath = Path("/home/l_msdetect/erik/tmp/g2")
            self.zmq_rcv = rs.PreviewReceiver('tcp://129.129.202.97:4547', timeout_ms=100)
            self.zmq_rcv.start()


    
        self.startButton.clicked.connect(self.start)
        pen = pg.mkPen(color = (36, 119, 173), width=1,) 
        self.curve = self.plotWidget.plot(pen=pen)

        #initialize fields
        self.nameLineEdit.setText(self.rcv.fname)
        self.nameLineEdit.editingFinished.connect(self.setFname)

        self.pathLineEdit.setText(self.rcv.fpath)
        self.pathLineEdit.editingFinished.connect(self.setPath)


        # self.fwriteCheckBox.setChecked(self.rcv.fwrite)
        # self.fwriteCheckBox.stateChanged.connect(self.setFwrite)
        #Timers
        self.progress_timer = QtCore.QTimer()
        self.progress_timer.timeout.connect(self.update_progress)
        self.update_progress()

        self.plot_timer =  QtCore.QTimer()
        self.plot_timer.timeout.connect(self.update_plot)
        # timer2.start(100)



    def update_progress(self):
        p = int(self.rcv.progress*100)
        self.progressBar.setValue(p)
        if p == 100:
            self.progress_timer.stop()
            self.plot_timer.stop()

    def update_status(self):
        s = str(self.det.status).split('.')[1]
        self.statusLabel.setText(s)

    def update_plot(self):
        data = self.zmq_rcv.get_data()
        self.curve.setData(data)


    def start(self):
        self.progress_timer.start(100)
        self.plot_timer.start(50)
        self.rcv.start()
        time.sleep(0.1)
        self.det.start()

    def setPath(self):
        self.rcv.fpath = self.pathLineEdit.text()

    def setFname(self):
        self.rcv.fname = self.nameLineEdit.text()
    
    # def setFwrite(self):
    #     self.rcv.fwrite = self.fwriteCheckBox.isChecked()


if __name__ == '__main__':


    parser = ArgumentParser()
    parser.add_argument(
        "receiver_endpoint", 
        help="Zmq endpoint to connect to the receiver", 
        type=str,
    )
    parser.add_argument(
        "-d", "--demo", 
        help="Demo mode, doesn't require detector", 
        action='store_true'
    )

    args = parser.parse_args()
    app = QtWidgets.QApplication(sys.argv)
    main = MainWindow(args)
    main.show()

    #Timer for updating the plot
    timer = QtCore.QTimer()
    timer.timeout.connect(main.update_status)
    timer.start(100)
    

    #Run the app
    app.exec_()

    # #Stop the receiving process before exiting
    main.zmq_rcv.stop()

