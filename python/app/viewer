#!/usr/bin/env python

"""
===============
Embedding in Qt
===============

Simple Qt application embedding Matplotlib canvases.  This program will work
equally well using Qt4 and Qt5.  Either version of Qt can be selected (for
example) by setting the ``MPLBACKEND`` environment variable to "Qt4Agg" or
"Qt5Agg", or by first importing the desired version of PyQt.
"""

#Needs to come before matplotlib.use("Qt5Agg")
from PySide2 import QtCore, QtWidgets, QtGui 

#Matplotlib imports
import matplotlib
matplotlib.use("Qt5Agg")
from matplotlib.backends.backend_qt5agg import (
    FigureCanvas,
    NavigationToolbar2QT as NavigationToolbar,
)
from matplotlib.figure import Figure
from mpl_toolkits.axes_grid1 import make_axes_locatable
import matplotlib.pyplot as plt

#Python general
import sys
import time
import argparse
import multiprocessing as mp
from pathlib import Path
import numpy as np
import ctypes

import reuss
import reuss.config as cfg

#image drawing
interval = 200 #ms
cmin = 0
cmax = 20e3


# x profile
class x:
    xmin = 0
    xmax = 320
    ymin = 0
    ymax = 5e7

class y:
    xmin = 0
    xmax = 320
    ymin = 0
    ymax = 5e7    

quick_cmax = ["5e3", "2e4", "1e5", "3e7"]


from PySide2 import QtGui, QtCore
import numpy as np
import matplotlib.pyplot as plt
class colors:
    dark = np.array((53, 53, 53))
    offwhite = np.array((230,230,230))
    fc = dark/255
    text = offwhite/255
    ac = fc*1.2

def get_palette(name):
    if name == "dark":
        palette = QtGui.QPalette()
        palette.setColor(QtGui.QPalette.Window, QtGui.QColor(53, 53, 53))
        palette.setColor(QtGui.QPalette.WindowText, QtCore.Qt.GlobalColor.white  )
        palette.setColor(QtGui.QPalette.Base, QtGui.QColor(25, 25, 25))
        palette.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53, 53, 53))
        palette.setColor(QtGui.QPalette.ToolTipBase, QtCore.Qt.GlobalColor.white  )
        palette.setColor(QtGui.QPalette.ToolTipText, QtCore.Qt.GlobalColor.white  )
        palette.setColor(QtGui.QPalette.Text, QtCore.Qt.GlobalColor.white)
        palette.setColor(QtGui.QPalette.Button, QtGui.QColor(53, 53, 53))
        palette.setColor(QtGui.QPalette.ButtonText, QtCore.Qt.GlobalColor.white  )
        palette.setColor(QtGui.QPalette.BrightText, QtCore.Qt.GlobalColor.red)
        palette.setColor(QtGui.QPalette.Link, QtGui.QColor(42, 130, 218))
        palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(42, 130, 218))
        palette.setColor(QtGui.QPalette.HighlightedText, QtCore.Qt.GlobalColor.black)
        return palette
    else:
        raise NotImplementedError("only dark theme is implemented")

def update_params():
    params = {
            "ytick.color" : colors.text,
            "xtick.color" : colors.text,
            "axes.labelcolor" : colors.text,
            "axes.edgecolor" : colors.text,
            "axes.facecolor" : colors.ac,
            "figure.facecolor" : colors.fc}
    plt.rcParams.update(params)

accframes = mp.RawValue(ctypes.c_int) #keep track of frames
accframes.value = 0

wait_flag =  mp.Value(ctypes.c_bool)
wait_flag.value = False
exit_flag = mp.Value(ctypes.c_bool)
exit_flag.value = False

def read_frames(buffer, dt = None):
    """
    This function reads frames from the zmq stream. It's 
    intended to run in it's own process launched by 
    mp.Process
    """
    global accframes

    #TODO! something here
    # pd = reuss.take_pedestal_float(reuss.JungfrauDetector())
    pd = reuss.shm.pedestal()
    cal = reuss.load_calibration()[:, reuss.config.roi[0][0], reuss.config.roi[0][0]]

    c = reuss.FrameAccumulator()
    c.set_pedestal(pd)
    c.set_calibration(cal)
    time.sleep(1)

    image = np.frombuffer(buffer, dtype=dt).reshape(reuss.config.nrows(), reuss.config.ncols())
    acc_image = np.frombuffer(acc_buffer, dtype=dt).reshape(reuss.config.nrows(), reuss.config.ncols())

    while not exit_flag.value:
        if wait_flag.value:
            time.sleep(0.1)
        else:
            tmp = c.accumulate(100)
            np.copyto(image, tmp)
            if accframes.value > 0:
                print(accframes.value)
                acc_image += tmp
                accframes.value -= 1
    print('Reader done!')

def accumulate(nframes):
    acc_image = np.frombuffer(acc_buffer, dtype=dt).reshape(reuss.config.nrows(), reuss.config.ncols())
    acc_image[:] = 0
    global accframes 
    accframes.value = nframes
    while accframes.value > 0:
        time.sleep(0.01)

    return acc_image.copy()

def sc(fname, nframes):
    data = accumulate(nframes)
    print(f'Saving: {fname}')
    reuss.io.save_tiff(fname, data)


class ToggleButton(QtWidgets.QPushButton):
    def __init__(self, label, window):
        super().__init__(label, window)
        self.started = False

class ApplicationWindow(QtWidgets.QMainWindow):

    
    def __init__(self):
        super().__init__()
        self._main = QtWidgets.QWidget()
        self.setCentralWidget(self._main)
        self.file_index = 0
        layout = QtWidgets.QGridLayout(self._main)
        layout.setColumnStretch(0,1)
        layout.setColumnStretch(1,0)

        # Main plot
        self.canvas = FigureCanvas(Figure(figsize=(10, 10)))
        layout.addWidget(self.canvas, 0, 0, 1, 1)
        
        
        # x and y beam profiles
        self.canvas_yprofile = FigureCanvas(Figure(figsize=(2, 10)))
        layout.addWidget(self.canvas_yprofile, 0, 1, 1, 1)
        self.canvas_yprofile.setVisible(False)
        self.y_ax = self.canvas_yprofile.figure.subplots()
        self.canvas_yprofile.figure.patch.set_facecolor(colors.fc)


        self.canvas_xprofile = FigureCanvas(Figure(figsize=(10, 2)))
        layout.addWidget(self.canvas_xprofile, 1, 0, 1, 1)
        self.x_ax = self.canvas_xprofile.figure.subplots()
        # self.canvas_xprofile.figure.patch.set_facecolor(colors.fc)

        

        row = 1

        #Settings 
        settings_col = 2  
        settings_layout = QtWidgets.QGridLayout()
        layout.addLayout(settings_layout, 0, settings_col, 1, 1, QtCore.Qt.AlignBottom)


        #Quick buttons for clim
        quick_layout = QtWidgets.QGridLayout()
        settings_layout.addLayout(quick_layout, row, 0, 1, 2)
        cl0 = QtWidgets.QPushButton(quick_cmax[0], self)
        cl0.clicked.connect(self.set_cl0)
        quick_layout.addWidget(cl0,0,0)
        cl1 = QtWidgets.QPushButton(quick_cmax[1], self)
        cl1.clicked.connect(self.set_cl1)
        quick_layout.addWidget(cl1,0,1)
        cl2 = QtWidgets.QPushButton(quick_cmax[2], self)
        cl2.clicked.connect(self.set_cl2)
        quick_layout.addWidget(cl2,0,2)
        cl3 = QtWidgets.QPushButton(quick_cmax[3], self)
        cl3.clicked.connect(self.set_cl3)
        quick_layout.addWidget(cl3,0,3)

        row += 1 

        settings_layout.addWidget(QtWidgets.QLabel("x profile:", self), row,0)
        self.xProfileCheck = QtWidgets.QCheckBox()
        settings_layout.addWidget(self.xProfileCheck , row, 1)
        self.xProfileCheck.stateChanged.connect(self.toggle_xprofile)
        row+=1

        #xmin xmax 
        self.xprofile_control = [
            QtWidgets.QLabel("xmin:", self),
            QtWidgets.QLineEdit(str(x.xmin), self),
            QtWidgets.QLabel("xmax:", self),
            QtWidgets.QLineEdit(str(x.xmax), self),
            QtWidgets.QLabel("ymin:", self),
            QtWidgets.QLineEdit(str(x.ymin), self),
            QtWidgets.QLabel("ymax:", self),
            QtWidgets.QLineEdit(str(x.ymax), self),
            self.canvas_xprofile
            ]
       
        self.xprofile_control[1].returnPressed.connect(self.set_xlim)
        self.xprofile_control[3].returnPressed.connect(self.set_xlim)
        self.xprofile_control[5].returnPressed.connect(self.set_xlim)
        self.xprofile_control[7].returnPressed.connect(self.set_xlim)
        settings_layout.addWidget(self.xprofile_control[0], row, 0)
        settings_layout.addWidget(self.xprofile_control[1], row, 1)
        row += 1
        settings_layout.addWidget(self.xprofile_control[2], row, 0)
        settings_layout.addWidget(self.xprofile_control[3], row, 1)
        row += 1
        settings_layout.addWidget(self.xprofile_control[4], row, 0)
        settings_layout.addWidget(self.xprofile_control[5], row, 1)
        row += 1
        settings_layout.addWidget(self.xprofile_control[6], row, 0)
        settings_layout.addWidget(self.xprofile_control[7], row, 1)
        row += 1

        for widget in self.xprofile_control:
            widget.setVisible(False)

        settings_layout.addWidget(QtWidgets.QLabel("y profile:", self), row,0)
        self.yProfileCheck = QtWidgets.QCheckBox()
        settings_layout.addWidget(self.yProfileCheck , row, 1)
        self.yProfileCheck.stateChanged.connect(self.toggle_yprofile)
        row+=1


        #xmin xmax 
        self.yprofile_control = [
            QtWidgets.QLabel("xmin:", self),
            QtWidgets.QLineEdit(str(y.xmin), self),
            QtWidgets.QLabel("xmax:", self),
            QtWidgets.QLineEdit(str(y.xmax), self),
            QtWidgets.QLabel("ymin:", self),
            QtWidgets.QLineEdit(str(y.ymin), self),
            QtWidgets.QLabel("ymax:", self),
            QtWidgets.QLineEdit(str(y.ymax), self),
            self.canvas_yprofile
            ]
       
        self.yprofile_control[1].returnPressed.connect(self.set_ylim)
        self.yprofile_control[3].returnPressed.connect(self.set_ylim)
        self.yprofile_control[5].returnPressed.connect(self.set_ylim)
        self.yprofile_control[7].returnPressed.connect(self.set_ylim)
        settings_layout.addWidget(self.yprofile_control[0], row, 0)
        settings_layout.addWidget(self.yprofile_control[1], row, 1)
        row += 1
        settings_layout.addWidget(self.yprofile_control[2], row, 0)
        settings_layout.addWidget(self.yprofile_control[3], row, 1)
        row += 1
        settings_layout.addWidget(self.yprofile_control[4], row, 0)
        settings_layout.addWidget(self.yprofile_control[5], row, 1)
        row += 1
        settings_layout.addWidget(self.yprofile_control[6], row, 0)
        settings_layout.addWidget(self.yprofile_control[7], row, 1)
        row += 1

        for widget in self.yprofile_control:
            widget.setVisible(False)



        settings_layout.addWidget( QtWidgets.QLabel("Interval (ms):", self), row,0)
        self.update_interval = QtWidgets.QSpinBox(self)
        self.update_interval.setMaximum(5000)
        self.update_interval.setSuffix(' ms')
        self.update_interval.setValue(interval)
        settings_layout.addWidget(self.update_interval, row, 1)

        row+=1

        

        #Cmin and cmax
        settings_layout.addWidget(QtWidgets.QLabel("cmap:", self), row,0)
        self.cmap_combo = QtWidgets.QComboBox()
        self.cmap_combo.addItems(["gist_gray", "coolwarm", "viridis"])
        settings_layout.addWidget(self.cmap_combo)
        self.cmap_combo.currentIndexChanged.connect(self.set_cmap)
        row+=1


        settings_layout.addWidget( QtWidgets.QLabel("cmin:", self), row,0)
        self.cmin_in = QtWidgets.QLineEdit(self)
        self.cmin_in.setText(str(cmin))
        settings_layout.addWidget(self.cmin_in, row,1)
        self.cmin_in.returnPressed.connect(self.set_clim)
        row+=1
        settings_layout.addWidget( QtWidgets.QLabel("cmax:", self), row,0)
        self.cmax_in = QtWidgets.QLineEdit(self)
        self.cmax_in.setText(str(cmax))
        settings_layout.addWidget(self.cmax_in, row,1)
        self.cmax_in.returnPressed.connect(self.set_clim)
        row+=1


        
        #Accumulate
        settings_layout.addWidget( QtWidgets.QLabel("fname:", self), row,0)
        self.fname_in = QtWidgets.QLineEdit(self)
        self.fname_in.setText('file')
        settings_layout.addWidget(self.fname_in, row,1)
        row += 1

        settings_layout.addWidget( QtWidgets.QLabel("findex:", self), row,0)
        self.findex_in = QtWidgets.QSpinBox(self)
        settings_layout.addWidget(self.findex_in, row,1)
        row += 1

        self.accumulate_button = QtWidgets.QPushButton("Accumulate", self)
        self.accumulate_button.setEnabled(False)
        settings_layout.addWidget( self.accumulate_button, row,0)
        self.accumulate_button.clicked.connect(self.start_accumulate)

        self.acc_spin = QtWidgets.QSpinBox(self)
        self.acc_spin.setValue(10)
        self.acc_spin.setSuffix(' frames')
        settings_layout.addWidget(self.acc_spin, row, 1)
        row += 1

        self.start_button = ToggleButton("Start", self)
        settings_layout.addWidget(self.start_button, row, 0, 1, 2)
        row += 1


        self.exit_button = QtWidgets.QPushButton("Exit", self)
        settings_layout.addWidget( self.exit_button, row,0,1,2)
        self.exit_button.clicked.connect(self.do_exit)

        self.tool_bar = NavigationToolbar(self.canvas, self)
        
        self.addToolBar(self.tool_bar)
        self.ax = self.canvas.figure.subplots()
        self.canvas.figure.patch.set_facecolor(colors.fc)

        # Plot overlays from .reussrc
        reuss.overlay.draw_overlay(self.ax)

        #Initial data
        data = np.random.randint(4000, 5000, reuss.config.nrows() * reuss.config.ncols(), dtype=np.uint16).reshape(
            reuss.config.nrows(), reuss.config.ncols()
        )
        self.im = self.ax.imshow(data, origin = cfg.plot.origin, cmap = args.cmap)
        self.x_line = self.x_ax.plot(data.sum(axis = 0), 'o-')
        # self.y_line = self.y_ax.plot(data.sum(axis = 1), np.arange(data.shape[1]), 'o-')
        self.y_line = self.y_ax.plot(data.sum(axis = 1), 'o-')
        self.x_ax.grid(True)
        self.y_ax.grid(True)

        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self._update_canvas)
        self.start_button.clicked.connect(self.toggle_timer)

    def toggle_xprofile(self, state):
        print(f"xtoggle: {state}")
        if(state):
            for widget in self.xprofile_control:
                widget.setVisible(True)
            self.set_xlim()
        else:
            print("disable profile")
            self.canvas_xprofile.setVisible(False)
            for widget in self.xprofile_control:
                widget.setVisible(False)

    def toggle_yprofile(self, state):
        print(f"ytoggle: {state}")
        if(state):
            for widget in self.yprofile_control:
                widget.setVisible(True)
            self.set_ylim()
        else:
            for widget in self.yprofile_control:
                widget.setVisible(False)

    def start_accumulate(self):
        findex = self.findex_in.value()
        sc(f'{self.fname_in.text()}_{findex}', self.acc_spin.value())
        self.findex_in.setValue(findex+1)

    def set_cmap(self):
        print(f'Colormap: {self.cmap_combo.currentText()}')
        self.im.set_cmap(self.cmap_combo.currentText())

    def do_exit(self):
        print('Exiting')
        exit_flag.value = True
        QtWidgets.QApplication.quit()


    def set_clim(self):
        print(f'set_clim: {self.cmin_in.text()}, {self.cmax_in.text()}')
        cmin = float(self.cmin_in.text())
        cmax = float(self.cmax_in.text())
        self.im.set_clim(cmin, cmax)
        self.ax.figure.canvas.draw()

    def set_cl0(self, txt):
        self.cmax_in.setText(quick_cmax[0])
        self.set_clim()
    def set_cl1(self):
        self.cmax_in.setText(quick_cmax[1])
        self.set_clim()
    def set_cl2(self):
        self.cmax_in.setText(quick_cmax[2])
        self.set_clim()
    def set_cl3(self):
        self.cmax_in.setText(quick_cmax[3])
        self.set_clim()

    def set_xlim(self):
        xmin = float(self.xprofile_control[1].text())
        xmax = float(self.xprofile_control[3].text())
        self.x_ax.set_xlim(xmin, xmax)
        ymin = float(self.xprofile_control[5].text())
        ymax = float(self.xprofile_control[7].text())
        self.x_ax.set_ylim(ymin, ymax)

    def set_ylim(self):
        xmin = float(self.yprofile_control[1].text())
        xmax = float(self.yprofile_control[3].text())
        self.y_ax.set_ylim(xmin, xmax)
        ymin = float(self.yprofile_control[5].text())
        ymax = float(self.yprofile_control[7].text())
        self.y_ax.set_xlim(ymin, ymax)

    def _update_canvas(self):
        global t0
        image = np.frombuffer(buffer, dtype=dt).reshape(
            reuss.config.nrows(), reuss.config.ncols()
        )

        t = time.time() - t0
        t0 = time.time()
        self.ax.set_title(f"Frame rate {1/t:.2f} Hz")
        self.im.set_array(image)
        self.ax.figure.canvas.draw()

        if self.xProfileCheck.isChecked():
            y = image.sum(axis = 0)
            self.x_line[0].set_ydata(y)
            # self.x_ax.set_ylim(0, y.max())
            self.x_ax.figure.canvas.draw()
            

        if self.yProfileCheck.isChecked():
            x = image.sum(axis = 1)
            # self.y_ax.set_xlim(0, x.max())
            self.y_line[0].set_xdata(x)
            self.y_ax.figure.canvas.draw()

    def toggle_timer(self):
        """
        This function controls the main data acq process
        """
        global t0
        t0 = time.time()
        if not self.start_button.started:
            self.start_button.setText("Stop")
            self.timer.setInterval(self.update_interval.value())
            self.start_button.started = True
            print(f"Timer interval: {self.timer.interval()}")
            wait_flag.value = False
            self.timer.start()
            self.accumulate_button.setEnabled(True)
        else:
            self.start_button.setText("Start")
            self.start_button.started = False
            self.timer.stop()
            wait_flag.value = True
            self.accumulate_button.setEnabled(False)



if __name__ == "__main__":
    t0 = time.time()
     #Parsing command line args
    parser = argparse.ArgumentParser()
    parser.add_argument("-pd", "--pedestal", help="Path to the pedestal", type = Path, default=None)
    parser.add_argument("-m", "--mock", help="Mock the detector", type = bool, default=False)
    parser.add_argument("-ip", "--zmqip", help="Zmq ip to connect to", type = str, default=None)
    parser.add_argument("-dt", "--dtype", help="data type to use", type = np.dtype, default=np.float32)
    parser.add_argument("-c", "--cmap", help="colormap for plot", type = str, default='gist_gray')

    args = parser.parse_args()
    dt = args.dtype

    if args.dtype == np.float32:
        cdtype = ctypes.c_float
    elif args.dtype == np.double:
        cdtype = ctypes.c_double
    else:
        raise ValueError("unknown data type")

    #Shared memory buffers for image data
    buffer = mp.RawArray(cdtype, reuss.config.npixles())
    acc_buffer = mp.RawArray(cdtype, reuss.config.npixles())
    acc_image = np.frombuffer(acc_buffer, dtype=args.dtype).reshape(reuss.config.nrows(), reuss.config.ncols())
    im_buffer = np.frombuffer(buffer, dtype=args.dtype).reshape(reuss.config.nrows(), reuss.config.ncols())
    image = np.zeros((reuss.config.nrows(), reuss.config.ncols()), dtype = args.dtype)

    #Run the data collection process
    reader = mp.Process(target=read_frames, args=[buffer, args.dtype])
    reader.start()


    update_params()

    #Run the main QtApplication
    qapp = QtWidgets.QApplication(sys.argv)
    app = ApplicationWindow()
    app.setStyle(QtWidgets.QStyleFactory.create("fusion"))
    palette = get_palette("dark")
    app.setPalette(palette)

    app.set_clim()
    app.show()
    qapp.exec_()

    #Final cleanup
    reader.join()
    print('Bye!')
